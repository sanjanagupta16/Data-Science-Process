legend = "Average Score") + ggtitle("Which area is expensive?",
subtitle = "Map showing Average Price by Area") +
theme(plot.title = element_text(face = "bold")) +
theme(plot.subtitle = element_text(face = "bold", color = "grey35")) +
theme(plot.caption = element_text(color = "grey68"))+scale_color_gradient(low="#d3cbcb", high="#852eaa")+ scale_fill_brewer("Average Price",palette=4)
listingdf$price <- as.numeric(gsub(",", "", substring(listingdf$price, 2)))
zipPrices <- listingdf %>% group_by(zipcode = zipcode) %>% summarise(avg_price = mean(price, na.rm = TRUE))
colnames(zipPrices) <- c("region","value")
zipPrices$region <- as.character(zipPrices$region)
seattle_fips = c(36005, 36047, 36061, 36081, 36085)
g_price_location <- zip_choropleth(zipPrices,
county_zoom = seattle_fips,
title = "Average Price by Region",
legend = "Average Score") + ggtitle("Which area is expensive?",
subtitle = "Map showing Average Price by Area") +
theme(plot.title = element_text(face = "bold")) +
theme(plot.subtitle = element_text(face = "bold", color = "grey35")) +
theme(plot.caption = element_text(color = "grey68"))+scale_color_gradient(low="#d3cbcb", high="#852eaa")+ scale_fill_brewer("Average Price",palette=4)
listingdf$price <- as.numeric(gsub(",", "", substring(listingdf$price, 2)))
zipPrices <- listingdf %>% group_by(zipcode = zipcode) %>% summarise(avg_price = mean(price, na.rm = TRUE))
colnames(zipPrices) <- c("region","value")
zipPrices$region <- as.character(zipPrices$region)
seattle_fips = c(36005, 36047, 36061, 36081, 36085)
#g_price_location <- zip_choropleth(zipPrices,
#county_zoom = seattle_fips,
#title = "Average Price by Region",
#legend = "Average Score") + ggtitle("Which area is expensive?",
#          subtitle = "Map showing Average Price by Area") +
#  theme(plot.title = element_text(face = "bold")) +
#  theme(plot.subtitle = element_text(face = "bold", color = "grey35")) +
#  theme(plot.caption = element_text(color = "grey68"))+scale_color_gradient(low="#d3cbcb", high="#852eaa")+ scale_fill_brewer("Average Price",palette=4)
#g_price_location
knitr::opts_chunk$set(echo = TRUE)
lm(formula = price ~ room_type + neighborhood + accommodates + bedrooms + bathrooms + minstay, data = listingdf)
lm(formula = price ~ room_type + neighborhood + accommodates + bedrooms + bathrooms, data = listingdf)
lm(formula = price ~ room_type + accommodates + bedrooms + bathrooms, data = listingdf)
lm(formula = price ~ room_type + accommodates + bedrooms + bathrooms + property_type, data = listingdf)
lm(formula = price ~ room_type + accommodates + bedrooms + bathrooms, data = listingdf)
knitr::opts_chunk$set(echo = TRUE)
summary(lm(formula = price ~ room_type + accommodates + bedrooms + bathrooms, data = listingdf))
summary(lm(formula = price ~ room_type + accommodates + bedrooms + bathrooms, data = data_train))
listingdf2 <- read.csv('data/listings.csv')
summary(lm(formula = price ~ room_type + accommodates + bedrooms + bathrooms, data = listingdf2))
summary(lm(formula = price ~ room_type + accommodates + bedrooms + bathrooms, data = data_train))
summary(lm(formula = price ~ room_type + accommodates + bedrooms + bathrooms, data = data_train))
plot(price ~room_type + accommodates + bedrooms + bathrooms, data = data_train) + abline(lm(formula = price ~ room_type + accommodates + bedrooms + bathrooms, data = data_train))
summary(lm(formula = price ~ room_type + accommodates + bedrooms + bathrooms + neighboorhood_cleansed, data = data_train))
summary(lm(formula = price ~ room_type + accommodates + bedrooms + bathrooms + neighboorhood_group_cleansed, data = data_train))
summary(lm(formula = price ~ room_type + accommodates + bedrooms + bathrooms + neighbourhood_cleansed, data = data_train))
plot(price ~room_type + accommodates + bedrooms + bathrooms, data = data_train) + abline(lm(formula = price ~ room_type + accommodates + bedrooms + bathrooms, data = data_train))
summary(lm(formula = price ~ room_type + accommodates + bedrooms + bathrooms + property_type, data = data_train))
plot(price ~room_type + accommodates + bedrooms + bathrooms + property_type, data = data_train) + abline(lm(formula = price ~ room_type + accommodates + bedrooms + bathrooms, data = data_train))
# price vs bathrooms
p1 <- ggplot(model_data, aes(x=bathrooms, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("square feet")
library(tidyverse)
library(plotly)
library(ggplot2)
library(naniar)
library(leaflet)
library(htmltools)
library(choroplethr)
library(dplyr)
library(choroplethrMaps)
setwd("~/Desktop/Winter 2020/Data 598C Data Science Process/Data Science Project")
library(tidyverse)
library(plotly)
library(ggplot2)
library(naniar)
library(leaflet)
library(htmltools)
library(choroplethr)
library(dplyr)
library(choroplethrMaps)
setwd("~/Desktop/Winter 2020/Data 598C Data Science Process/Data Science Project")
data1 <- read.csv(file = "data/listings.csv", header = TRUE)
data2 <- read.csv(file = "data/calendar.csv")
data3 <- read.csv(file = "data/reviews.csv")
data_train <- data1
#cols_to_delete <- c("last_scraped", "thumbnail_url", "host_picture_url", "medium_url", "picture_url", "xl_picture_url", "host_thumbnail_url", "host_picture_url")
#select(data_train, -contains("url"))
data_train$last_scraped <- NULL
data_train$thumbnail_url <- NULL
data_train$host_picture_url <- NULL
data_train$medium_url <- NULL
data_train$picture_url <- NULL
data_train$xl_picture_url <- NULL
data_train$host_thumbnail_url <- NULL
data_train$host_picture_url <- NULL
data_train$host_url <- NULL
data_train$scrape_id <- NULL
data_train$experiences_offered <- NULL
data_train$neighborhood_overview <- NULL
data_train$host_about <- NULL
data_train$host_id <- NULL
data_train$host_verifications <- NULL
data_train$host_has_profile_pic <- NULL
data_train$host_identity_verified <- NULL
data_train$calendar_last_scraped <- NULL
data_train$review_scores_communication <- NULL
data_train$review_scores_location <- NULL
data_train$review_scores_value <- NULL
data_train$license <- NULL
data_train$instant_bookable <- NULL
data_train$require_guest_profile_picture <- NULL
data_train$require_guest_phone_verification <- NULL
data_train$summary <- NULL
data_train$notes <- NULL
#Down to 66 columns from initial 92
rownames(data_train) <- NULL
#Viewing the data
#glimpse(data_train)
#summary(data_train$is_location_exact)
data_train$price <- sub("\\$","",data_train$price)
data_train$price <- sub(",","",data_train$price)
data_train$price <- as.integer(data_train$price)
data_train$host_response_time <- as.factor(data_train$host_response_time)
data_train$host_is_superhost <- as.factor(data_train$host_is_superhost)
data_train$neighbourhood_cleansed <- as.factor(data_train$neighbourhood_cleansed)
data_train$is_location_exact <- as.factor(data_train$is_location_exact)
data_train$property_type <- as.factor(data_train$property_type)
data_train$room_type <- as.factor(data_train$room_type)
data_train$bed_type <- as.factor(data_train$bed_type)
data_train$calendar_updated <- as.factor(data_train$calendar_updated)
data_train$cancellation_policy <- as.factor(data_train$cancellation_policy)
data_train$host_response_rate<- as.numeric(sub("%", "", data_train$host_response_rate))
data_train$host_response_rate <- data_train$host_response_rate/100
data_train$extra_people <- as.numeric(sub("\\$","",data_train$extra_people))
0 %in% data_train$price
#is.null(data_train$zipcode)
data_train %>% filter_all(all_vars(!is.na(.)))
data_train %>% filter_all(all_vars(complete.cases(.)))
data_train %>% filter_all(all_vars(!is.null(.)))
data_train %>% filter_all(all_vars(complete.cases(.)))
check_missing<- function(x){
if (is.character(x)) sum(x=="") else sum(is.na(x))
}
NMISS<-data.frame(nmiss=sapply(data_train,check_missing))
#write.csv(NMISS, "missing.csv")
#plotting missing data
missingdata <- data_train
missingdata[missingdata == ""] <- NA
missingdata <- missingdata %>% select(host_is_superhost, review_scores_rating,
host_response_time, name, host_since, zipcode, latitude,longitude,
host_location, host_response_rate,neighbourhood_cleansed,
property_type, price,weekly_price, monthly_price, bedrooms, bathrooms)
gg_miss_var(missingdata) + labs(title = "Missing Values Plot",y = "Missing Data", x = "Attribute")  + theme_bw() + theme(text=element_text(color = "dark blue"))
data_train$review_scores_rating <- ifelse(is.na(data_train$review_scores_rating)==T,97,data_train$review_scores_rating)
data_train$host_response_rate <- ifelse(is.na(data_train$host_response_rate)==T,97,data_train$host_response_rate)
#Using same plot as before to check the values
gg_miss_var(missingdata) + labs(title = "Missing Values Plot",y = "Missing Data", x = "Attribute")  + theme_bw() + theme(text=element_text(color = "dark blue"))
#In neighborhood group cleansed, there are 794 rows with "Other Neighborhoods"
#Need to fix this - maybe look at neighorhood cleansed column instead?
#Looking at categorical data now
sort(table(data_train$host_neighbourhood), decreasing = TRUE)
head(subset(data_train, select = 'neighbourhood_group_cleansed'))
factor(data_train$neighbourhood_group_cleansed)
count(data_train, 'neighbourhood_group_cleansed')
count(data_train, 'neighbourhood_cleansed')
#Getting a count of listings per neighborhood
#write.csv(neigborhood_data, "neighborhoodcount.csv")
#count(data_train$neighbourhood_cleansed)
plot(data_train$neighbourhood_cleansed, xlab = 'Neighborhoods', ylab = 'Count')
neighborhood <- (data_train$neighbourhood_cleansed)
#x <- sort(count((neighborhood)))
#arrange(data_train, neighbourhood_cleansed)
neighborhood_data <- data_train[order(data_train[,21] ),]
summary(neighborhood_data$neighbourhood_cleansed)
#Trying to fix "Other Neighborhoods" value in neighborhood group cleaned column
#for(i in data_train)
# if(i[neighbourhood_group_cleansed] == "Other neighborhoods")
#  i[neighbourhood_group_cleansed] <-  i[neighborhood_cleansed]
#Plotting count of listings per neighborhood
neigborhood_data <- table(data_train$neighbourhood_cleansed)
barplot(sort(table(data_train$neighbourhood_group_cleansed), decreasing = TRUE), ylab = "Count",horiz = FALSE , main = "Distribution of Listings Per Neighborhood", beside = FALSE)
#barplot(table(data_train$neighbourhood_group_cleansed), density = 20, ylab = "Count",horiz = FALSE , main = "Distribution of Listings Per Neighborhood", beside = FALSE) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data_train, aes(neighbourhood_group_cleansed)) + geom_bar(na.rm = TRUE, stat = "count") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#barplot(data_train$host_listings_count, main = "Count of Host Listings", xlab = "", ylab = "Count")
ggplot(data_train, aes(host_listings_count)) + geom_bar(na.rm = TRUE) + xlim(0,21)
#barchart(data_train$property_type, main = "Types of Airbnb Properties", xlab = "Count")
prop_type <- table(data_train$property_type)
barplot(table(data_train$property_type), ylab = "Count",horiz = FALSE, main = "Types of Airbnb Properties", beside = FALSE, las = 1)
ggplot(data_train, aes(property_type)) + geom_bar(na.rm = TRUE, stat = "count") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#plot(data_train$host_is_superhost)
table(data_train$room_type,data_train$neighbourhood_group)
data_train %>% boxplot(price ~ neighbourhood_group_cleansed,data = ., main="Box Plot of price vs neighbourhood",
ylab="neighbourhood", xlab="Price",horizontal=TRUE)
ggplot(data_train, aes(x = fct_infreq(neighbourhood_cleansed), fill = room_type)) +
geom_bar() +
labs(title = "No. of listings by neighborhood",
x = "Neighborhood", y = "No. of listings") +
theme(legend.position = "bottom") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#top_10 <- data_train %>% group_by(neighborhood_cleansed) %>% tally()
data_train$host_since <- as.Date(data_train$host_since)
data_train$host_since <- as.Date("2017-05-10")-data_train$host_since
ggplot(data=data_train, aes(price)) +
geom_histogram(fill="red") +
labs(title="Histogram of Price") +
labs(x="Price", y="Count")
# Percentile of price
quantile(data_train$price, c(.9, .95, .97, 0.975, 0.98, 0.99, 0.995, 0.999, 0.9999))
Private_rooms <- data_train %>% filter(room_type == "Private room")
Private_rooms$price %>% summary()
entire_house <- data_train %>% filter(room_type == "Entire home/apt")
entire_house$price %>% summary()
shared_room <- data_train %>% filter(room_type == "Shared room")
shared_room$price %>% summary()
listingdf <- read.csv('data/listings.csv')
zipReviews <- listingdf %>% group_by(zipcode = zipcode) %>% summarise(avg_loc_review = mean(review_scores_location, na.rm = TRUE))
average_price <- data_train %>% group_by(room_type) %>% summarise(price = mean(price))
colnames(average_price)[1] <- "Room Type"
colnames(average_price)[2] <- "Average Price"
print((average_price))
#Reading Listings Data
listingdf <- read.csv('data/listings.csv')
#Creating a link for each pop up
#Creating Listings across Seattle
leaflet(listingdf) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude,labelOptions = labelOptions(noHide = T),
clusterOptions = markerClusterOptions(),
popup = paste0("<b> Name: </b>", listingdf$name , "<br/><b> Host Name: </b>",
listingdf$host_name, "<br> <b> Price/night: </b>", listingdf$price, "<br/><b> Room Type: </b>",
listingdf$room_type, "<br/><b> Property Type: </b>", listingdf$property_type
)) %>%
setView(-122.335167, 47.608013, zoom = 11) %>%
addProviderTiles("CartoDB.Positron")
summary(lm(formula = price ~ room_type + accommodates + bedrooms + bathrooms + property_type, data = data_train))
plot(price ~room_type + accommodates + bedrooms + bathrooms + property_type, data = data_train) + abline(lm(formula = price ~ room_type + accommodates + bedrooms + bathrooms, data = data_train))
# price vs bathrooms
p1 <- ggplot(model_data, aes(x=bathrooms, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("square feet")
# price vs bathrooms
p1 <- ggplot(data_train, aes(x=bathrooms, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("square feet")
# price vs price
p2 <- ggplot(data_train, aes(x=price, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("square feet")
# price vs accommodates
p3 <- ggplot(data_train, aes(x=accommodates, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("square feet")
# price vs bedrooms
p4 <- ggplot(data_train, aes(x=bedrooms, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("square feet")
# combining all plots
multiplot(p1, p2, p3, p4, cols=2)
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
# price vs bathrooms
p1 <- ggplot(data_train, aes(x=bathrooms, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("square feet")
# price vs price
p2 <- ggplot(data_train, aes(x=price, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("square feet")
# price vs accommodates
p3 <- ggplot(data_train, aes(x=accommodates, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("square feet")
# price vs bedrooms
p4 <- ggplot(data_train, aes(x=bedrooms, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("square feet")
# combining all plots
multiplot(p1, p2, p3, p4, cols=2)
p1 <- ggplot(data_train, aes(x=bathrooms, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("square feet")
p1 <- ggplot(data_train, aes(x=bathrooms, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
p1
# price vs bathrooms
p1 <- ggplot(data_train, aes(x=bathrooms, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
p2 <- ggplot(data_train, aes(x=property_type, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
# price vs accommodates
p3 <- ggplot(data_train, aes(x=accommodates, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
# price vs bedrooms
p4 <- ggplot(data_train, aes(x=bedrooms, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
# combining all plots
multiplot(p1, p2, p3, p4, cols=2)
install.packages("gridExtra")
library(gridExtra)
# price vs bathrooms
p1 <- ggplot(data_train, aes(x=bathrooms, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
p2 <- ggplot(data_train, aes(x=property_type, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
# price vs accommodates
p3 <- ggplot(data_train, aes(x=accommodates, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
# price vs bedrooms
p4 <- ggplot(data_train, aes(x=bedrooms, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
# combining all plots
grid.arrange(p1, p2, p3, p4)
# price vs bathrooms
p1 <- ggplot(data_train, aes(x=bathrooms, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
p2 <- ggplot(data_train, aes(x=property_type$private_room, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
# price vs accommodates
p3 <- ggplot(data_train, aes(x=accommodates, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
# price vs bedrooms
p4 <- ggplot(data_train, aes(x=bedrooms, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
# combining all plots
grid.arrange(p1, p2, p3, p4)
property_type[1]
data_train$property_type[1]
data_train$property_type[2]
# price vs bathrooms
p1 <- ggplot(data_train, aes(x=bathrooms, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
p2 <- ggplot(data_train, aes(x=property_type, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
# price vs accommodates
p3 <- ggplot(data_train, aes(x=accommodates, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
# price vs bedrooms
p4 <- ggplot(data_train, aes(x=bedrooms, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
# combining all plots
grid.arrange(p1, p2, p3, p4)
# price vs bathrooms
p1 <- ggplot(data_train, aes(x=bathrooms, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
# price vs accommodates
p2 <- ggplot(data_train, aes(x=accommodates, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
# price vs bedrooms
p3 <- ggplot(data_train, aes(x=bedrooms, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
# combining all plots
grid.arrange(p1, p2, p3)
# price vs bathrooms
p1 <- ggplot(data_train, aes(x=bathrooms, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
# price vs accommodates
p2 <- ggplot(data_train, aes(x=accommodates, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
# price vs bedrooms
p3 <- ggplot(data_train, aes(x=bedrooms, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
# combining all plots
grid.arrange(p1, p2, p3, ncol = 2)
# price vs bathrooms
p1 <- ggplot(data_train, aes(x=bathrooms, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
# price vs accommodates
p2 <- ggplot(data_train, aes(x=accommodates, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
# price vs bedrooms
p3 <- ggplot(data_train, aes(x=bedrooms, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
# price vs room_type
p4 <- ggplot(data_train, aes(x=room_type, y=price)) +
geom_point(colour = "orange", size = 1.5) +
geom_smooth(method='lm', color='red') +
ylab("price")
# combining all plots
grid.arrange(p1, p2, p3, p4,ncol = 2)
top_df <- data_train %>% top_n(n = 50, wt = price)
library(tidyverse)
library(plotly)
library(ggplot2)
library(naniar)
library(leaflet)
library(htmltools)
library(choroplethr)
library(dplyr)
library(choroplethrMaps)
library(ggplot2)
library(gridExtra)
library(ggmap)
setwd("~/Desktop/Winter 2020/Data 598C Data Science Process/Data Science Project")
library(tidyverse)
library(plotly)
library(ggplot2)
library(naniar)
library(leaflet)
library(htmltools)
library(choroplethr)
library(dplyr)
library(choroplethrMaps)
library(ggplot2)
library(gridExtra)
library(ggmap)
setwd("~/Desktop/Winter 2020/Data 598C Data Science Process/Data Science Project")
top_df <- data_train %>% top_n(n = 50, wt = price)
# get background map
top_height <- max(top_df$latitude) - min(top_df$latitude)
top_width <- max(top_df$longitude) - min(top_df$longitude)
top_borders <- c(bottom  = min(top_df$latitude)  - 0.1 * top_height,
top     = max(top_df$latitude)  + 0.1 * top_height,
left    = min(top_df$longitude) - 0.1 * top_width,
right   = max(top_df$longitude) + 0.1 * top_width)
top_map <- get_stamenmap(top_borders, zoom = 12, maptype = "toner-lite")
# map of top 50 most expensive
ggmap(top_map) +
geom_point(data = top_df, mapping = aes(x = longitude, y = latitude,
col = price)) +
scale_color_gradient(low = "blue", high = "red")
top_df <- data_train %>% top_n(n = 50, wt = price)
# get background map
top_height <- max(top_df$latitude) - min(top_df$latitude)
top_width <- max(top_df$longitude) - min(top_df$longitude)
top_borders <- c(bottom  = min(top_df$latitude)  - 0.1 * top_height,
top     = max(top_df$latitude)  + 0.1 * top_height,
left    = min(top_df$longitude) - 0.1 * top_width,
right   = max(top_df$longitude) + 0.1 * top_width)
top_map <- get_stamenmap(top_borders, zoom = 13, maptype = "toner-lite")
# map of top 50 most expensive
ggmap(top_map) +
geom_point(data = top_df, mapping = aes(x = longitude, y = latitude,
col = price)) +
scale_color_gradient(low = "blue", high = "red")
top_df <- data_train %>% top_n(n = 50, wt = price)
# get background map
top_height <- max(top_df$latitude) - min(top_df$latitude)
top_width <- max(top_df$longitude) - min(top_df$longitude)
top_borders <- c(bottom  = min(top_df$latitude)  - 0.1 * top_height,
top     = max(top_df$latitude)  + 0.1 * top_height,
left    = min(top_df$longitude) - 0.1 * top_width,
right   = max(top_df$longitude) + 0.1 * top_width)
top_map <- get_stamenmap(top_borders, zoom = 13, maptype = "toner-lite")
# map of top 50 most expensive
ggmap(top_map) +
geom_point(data = top_df, mapping = aes(x = longitude, y = latitude,
col = price)) +
scale_color_gradient(low = "blue", high = "red")
install.packages("htmlwidgets\")
;
q
qqqqq
